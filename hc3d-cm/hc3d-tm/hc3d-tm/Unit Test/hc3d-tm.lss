
hc3d-tm.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000542  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004ee  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000542  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000574  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000138  00000000  00000000  000005b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001ea6  00000000  00000000  000006ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000d49  00000000  00000000  00002592  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001be6  00000000  00000000  000032db  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000408  00000000  00000000  00004ec4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000122b3  00000000  00000000  000052cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000177c  00000000  00000000  0001757f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000d8  00000000  00000000  00018cfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00004380  00000000  00000000  00018dd3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	4c c0       	rjmp	.+152    	; 0x9e <__bad_interrupt>
   6:	00 00       	nop
   8:	4a c0       	rjmp	.+148    	; 0x9e <__bad_interrupt>
   a:	00 00       	nop
   c:	48 c0       	rjmp	.+144    	; 0x9e <__bad_interrupt>
   e:	00 00       	nop
  10:	46 c0       	rjmp	.+140    	; 0x9e <__bad_interrupt>
  12:	00 00       	nop
  14:	44 c0       	rjmp	.+136    	; 0x9e <__bad_interrupt>
  16:	00 00       	nop
  18:	42 c0       	rjmp	.+132    	; 0x9e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	40 c0       	rjmp	.+128    	; 0x9e <__bad_interrupt>
  1e:	00 00       	nop
  20:	3e c0       	rjmp	.+124    	; 0x9e <__bad_interrupt>
  22:	00 00       	nop
  24:	3c c0       	rjmp	.+120    	; 0x9e <__bad_interrupt>
  26:	00 00       	nop
  28:	3a c0       	rjmp	.+116    	; 0x9e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	38 c0       	rjmp	.+112    	; 0x9e <__bad_interrupt>
  2e:	00 00       	nop
  30:	36 c0       	rjmp	.+108    	; 0x9e <__bad_interrupt>
  32:	00 00       	nop
  34:	34 c0       	rjmp	.+104    	; 0x9e <__bad_interrupt>
  36:	00 00       	nop
  38:	32 c0       	rjmp	.+100    	; 0x9e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	30 c0       	rjmp	.+96     	; 0x9e <__bad_interrupt>
  3e:	00 00       	nop
  40:	2e c0       	rjmp	.+92     	; 0x9e <__bad_interrupt>
  42:	00 00       	nop
  44:	2c c0       	rjmp	.+88     	; 0x9e <__bad_interrupt>
  46:	00 00       	nop
  48:	2a c0       	rjmp	.+84     	; 0x9e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	28 c0       	rjmp	.+80     	; 0x9e <__bad_interrupt>
  4e:	00 00       	nop
  50:	26 c0       	rjmp	.+76     	; 0x9e <__bad_interrupt>
  52:	00 00       	nop
  54:	24 c0       	rjmp	.+72     	; 0x9e <__bad_interrupt>
  56:	00 00       	nop
  58:	22 c0       	rjmp	.+68     	; 0x9e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	20 c0       	rjmp	.+64     	; 0x9e <__bad_interrupt>
  5e:	00 00       	nop
  60:	1e c0       	rjmp	.+60     	; 0x9e <__bad_interrupt>
  62:	00 00       	nop
  64:	1c c0       	rjmp	.+56     	; 0x9e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 30       	cpi	r26, 0x00	; 0
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a0 e0       	ldi	r26, 0x00	; 0
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a0 30       	cpi	r26, 0x00	; 0
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	04 d2       	rcall	.+1032   	; 0x4a4 <main>
  9c:	26 c2       	rjmp	.+1100   	; 0x4ea <_exit>

0000009e <__bad_interrupt>:
  9e:	b0 cf       	rjmp	.-160    	; 0x0 <__vectors>

000000a0 <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	1f 92       	push	r1
  a6:	cd b7       	in	r28, 0x3d	; 61
  a8:	de b7       	in	r29, 0x3e	; 62
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
  aa:	80 e0       	ldi	r24, 0x00	; 0
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
#if !MEGA_XX_UN0 && !MEGA_XX_UN1
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
  ac:	e4 e6       	ldi	r30, 0x64	; 100
  ae:	f0 e0       	ldi	r31, 0x00	; 0
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
  b0:	04 c0       	rjmp	.+8      	; 0xba <sysclk_init+0x1a>
		*(reg++) = 0xFF;
  b2:	9f ef       	ldi	r25, 0xFF	; 255
  b4:	90 83       	st	Z, r25
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
  b6:	8f 5f       	subi	r24, 0xFF	; 255
		*(reg++) = 0xFF;
  b8:	31 96       	adiw	r30, 0x01	; 1
	uint8_t i;
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
  ba:	88 23       	and	r24, r24
  bc:	d1 f3       	breq	.-12     	; 0xb2 <sysclk_init+0x12>
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
  be:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
		*(reg++) = 0xFF;
	}
#endif
#if !MEGA_UNSPECIFIED && !MEGA_XX
	/* Set up system clock prescalers if different from defaults */
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
  c2:	83 30       	cpi	r24, 0x03	; 3
  c4:	69 f0       	breq	.+26     	; 0xe0 <sysclk_init+0x40>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
  c6:	8f b7       	in	r24, 0x3f	; 63
  c8:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
  ca:	f8 94       	cli
	return flags;
  cc:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
  ce:	5f 93       	push	r21
  d0:	50 e8       	ldi	r21, 0x80	; 128
  d2:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  d6:	53 e0       	ldi	r21, 0x03	; 3
  d8:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
  dc:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
  de:	8f bf       	out	0x3f, r24	; 63
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
  e0:	0f 90       	pop	r0
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	08 95       	ret

000000e8 <driver_uart_init>:
 *  Author: Joel
 */ 

#ifdef UNIT_TEST

void driver_uart_init(void){
  e8:	08 95       	ret

000000ea <ds18b20crc8>:
	//Poor DS18B20 feels better then...
	*port |= mask;
	*direction |= mask;

	return DS18B20_ERROR_OK;
}
  ea:	dc 01       	movw	r26, r24
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	40 e0       	ldi	r20, 0x00	; 0
  f0:	12 c0       	rjmp	.+36     	; 0x116 <ds18b20crc8+0x2c>
  f2:	fd 01       	movw	r30, r26
  f4:	e4 0f       	add	r30, r20
  f6:	f1 1d       	adc	r31, r1
  f8:	20 81       	ld	r18, Z
  fa:	90 e0       	ldi	r25, 0x00	; 0
  fc:	09 c0       	rjmp	.+18     	; 0x110 <ds18b20crc8+0x26>
  fe:	38 2f       	mov	r19, r24
 100:	32 27       	eor	r19, r18
 102:	86 95       	lsr	r24
 104:	30 ff       	sbrs	r19, 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <ds18b20crc8+0x22>
 108:	3c e8       	ldi	r19, 0x8C	; 140
 10a:	83 27       	eor	r24, r19
 10c:	26 95       	lsr	r18
 10e:	9f 5f       	subi	r25, 0xFF	; 255
 110:	98 30       	cpi	r25, 0x08	; 8
 112:	a8 f3       	brcs	.-22     	; 0xfe <ds18b20crc8+0x14>
 114:	4f 5f       	subi	r20, 0xFF	; 255
 116:	46 17       	cp	r20, r22
 118:	60 f3       	brcs	.-40     	; 0xf2 <ds18b20crc8+0x8>
 11a:	08 95       	ret

0000011c <ds18b20match>:
 11c:	8f 92       	push	r8
 11e:	9f 92       	push	r9
 120:	af 92       	push	r10
 122:	bf 92       	push	r11
 124:	cf 92       	push	r12
 126:	df 92       	push	r13
 128:	ef 92       	push	r14
 12a:	ff 92       	push	r15
 12c:	0f 93       	push	r16
 12e:	1f 93       	push	r17
 130:	cf 93       	push	r28
 132:	df 93       	push	r29
 134:	7c 01       	movw	r14, r24
 136:	6b 01       	movw	r12, r22
 138:	5a 01       	movw	r10, r20
 13a:	d2 2f       	mov	r29, r18
 13c:	48 01       	movw	r8, r16
 13e:	01 2b       	or	r16, r17
 140:	19 f4       	brne	.+6      	; 0x148 <ds18b20match+0x2c>
 142:	0c ec       	ldi	r16, 0xCC	; 204
 144:	2e d1       	rcall	.+604    	; 0x3a2 <onewireWrite>
 146:	10 c0       	rjmp	.+32     	; 0x168 <ds18b20match+0x4c>
 148:	05 e5       	ldi	r16, 0x55	; 85
 14a:	2b d1       	rcall	.+598    	; 0x3a2 <onewireWrite>
 14c:	c0 e0       	ldi	r28, 0x00	; 0
 14e:	0a c0       	rjmp	.+20     	; 0x164 <ds18b20match+0x48>
 150:	f4 01       	movw	r30, r8
 152:	ec 0f       	add	r30, r28
 154:	f1 1d       	adc	r31, r1
 156:	00 81       	ld	r16, Z
 158:	2d 2f       	mov	r18, r29
 15a:	a5 01       	movw	r20, r10
 15c:	b6 01       	movw	r22, r12
 15e:	c7 01       	movw	r24, r14
 160:	20 d1       	rcall	.+576    	; 0x3a2 <onewireWrite>
 162:	cf 5f       	subi	r28, 0xFF	; 255
 164:	c8 30       	cpi	r28, 0x08	; 8
 166:	a0 f3       	brcs	.-24     	; 0x150 <ds18b20match+0x34>
 168:	df 91       	pop	r29
 16a:	cf 91       	pop	r28
 16c:	1f 91       	pop	r17
 16e:	0f 91       	pop	r16
 170:	ff 90       	pop	r15
 172:	ef 90       	pop	r14
 174:	df 90       	pop	r13
 176:	cf 90       	pop	r12
 178:	bf 90       	pop	r11
 17a:	af 90       	pop	r10
 17c:	9f 90       	pop	r9
 17e:	8f 90       	pop	r8
 180:	08 95       	ret

00000182 <ds18b20convert>:
 182:	bf 92       	push	r11
 184:	cf 92       	push	r12
 186:	df 92       	push	r13
 188:	ef 92       	push	r14
 18a:	ff 92       	push	r15
 18c:	0f 93       	push	r16
 18e:	1f 93       	push	r17
 190:	cf 93       	push	r28
 192:	df 93       	push	r29
 194:	ec 01       	movw	r28, r24
 196:	7b 01       	movw	r14, r22
 198:	6a 01       	movw	r12, r20
 19a:	b2 2e       	mov	r11, r18
 19c:	a4 d0       	rcall	.+328    	; 0x2e6 <onewireInit>
 19e:	81 30       	cpi	r24, 0x01	; 1
 1a0:	61 f0       	breq	.+24     	; 0x1ba <ds18b20convert+0x38>
 1a2:	2b 2d       	mov	r18, r11
 1a4:	a6 01       	movw	r20, r12
 1a6:	b7 01       	movw	r22, r14
 1a8:	ce 01       	movw	r24, r28
 1aa:	b8 df       	rcall	.-144    	; 0x11c <ds18b20match>
 1ac:	04 e4       	ldi	r16, 0x44	; 68
 1ae:	2b 2d       	mov	r18, r11
 1b0:	a6 01       	movw	r20, r12
 1b2:	b7 01       	movw	r22, r14
 1b4:	ce 01       	movw	r24, r28
 1b6:	f5 d0       	rcall	.+490    	; 0x3a2 <onewireWrite>
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	df 91       	pop	r29
 1bc:	cf 91       	pop	r28
 1be:	1f 91       	pop	r17
 1c0:	0f 91       	pop	r16
 1c2:	ff 90       	pop	r15
 1c4:	ef 90       	pop	r14
 1c6:	df 90       	pop	r13
 1c8:	cf 90       	pop	r12
 1ca:	bf 90       	pop	r11
 1cc:	08 95       	ret

000001ce <ds18b20rsp>:
 1ce:	8f 92       	push	r8
 1d0:	9f 92       	push	r9
 1d2:	af 92       	push	r10
 1d4:	bf 92       	push	r11
 1d6:	cf 92       	push	r12
 1d8:	df 92       	push	r13
 1da:	ef 92       	push	r14
 1dc:	ff 92       	push	r15
 1de:	0f 93       	push	r16
 1e0:	1f 93       	push	r17
 1e2:	cf 93       	push	r28
 1e4:	df 93       	push	r29
 1e6:	6c 01       	movw	r12, r24
 1e8:	5b 01       	movw	r10, r22
 1ea:	4a 01       	movw	r8, r20
 1ec:	d2 2f       	mov	r29, r18
 1ee:	7b d0       	rcall	.+246    	; 0x2e6 <onewireInit>
 1f0:	81 30       	cpi	r24, 0x01	; 1
 1f2:	b9 f1       	breq	.+110    	; 0x262 <ds18b20rsp+0x94>
 1f4:	2d 2f       	mov	r18, r29
 1f6:	a4 01       	movw	r20, r8
 1f8:	b5 01       	movw	r22, r10
 1fa:	c6 01       	movw	r24, r12
 1fc:	8f df       	rcall	.-226    	; 0x11c <ds18b20match>
 1fe:	0e eb       	ldi	r16, 0xBE	; 190
 200:	2d 2f       	mov	r18, r29
 202:	a4 01       	movw	r20, r8
 204:	b5 01       	movw	r22, r10
 206:	c6 01       	movw	r24, r12
 208:	cc d0       	rcall	.+408    	; 0x3a2 <onewireWrite>
 20a:	c0 e0       	ldi	r28, 0x00	; 0
 20c:	0b c0       	rjmp	.+22     	; 0x224 <ds18b20rsp+0x56>
 20e:	87 01       	movw	r16, r14
 210:	0c 0f       	add	r16, r28
 212:	11 1d       	adc	r17, r1
 214:	2d 2f       	mov	r18, r29
 216:	a4 01       	movw	r20, r8
 218:	b5 01       	movw	r22, r10
 21a:	c6 01       	movw	r24, r12
 21c:	0c d1       	rcall	.+536    	; 0x436 <onewireRead>
 21e:	f8 01       	movw	r30, r16
 220:	80 83       	st	Z, r24
 222:	cf 5f       	subi	r28, 0xFF	; 255
 224:	c9 30       	cpi	r28, 0x09	; 9
 226:	98 f3       	brcs	.-26     	; 0x20e <ds18b20rsp+0x40>
 228:	f7 01       	movw	r30, r14
 22a:	70 81       	ld	r23, Z
 22c:	81 81       	ldd	r24, Z+1	; 0x01
 22e:	62 81       	ldd	r22, Z+2	; 0x02
 230:	53 81       	ldd	r21, Z+3	; 0x03
 232:	44 81       	ldd	r20, Z+4	; 0x04
 234:	35 81       	ldd	r19, Z+5	; 0x05
 236:	26 81       	ldd	r18, Z+6	; 0x06
 238:	97 81       	ldd	r25, Z+7	; 0x07
 23a:	87 2b       	or	r24, r23
 23c:	86 2b       	or	r24, r22
 23e:	85 2b       	or	r24, r21
 240:	84 2b       	or	r24, r20
 242:	83 2b       	or	r24, r19
 244:	82 2b       	or	r24, r18
 246:	89 2b       	or	r24, r25
 248:	49 f0       	breq	.+18     	; 0x25c <ds18b20rsp+0x8e>
 24a:	68 e0       	ldi	r22, 0x08	; 8
 24c:	c7 01       	movw	r24, r14
 24e:	4d df       	rcall	.-358    	; 0xea <ds18b20crc8>
 250:	f7 01       	movw	r30, r14
 252:	90 85       	ldd	r25, Z+8	; 0x08
 254:	89 17       	cp	r24, r25
 256:	21 f0       	breq	.+8      	; 0x260 <ds18b20rsp+0x92>
 258:	82 e0       	ldi	r24, 0x02	; 2
 25a:	03 c0       	rjmp	.+6      	; 0x262 <ds18b20rsp+0x94>
 25c:	83 e0       	ldi	r24, 0x03	; 3
 25e:	01 c0       	rjmp	.+2      	; 0x262 <ds18b20rsp+0x94>
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	df 91       	pop	r29
 264:	cf 91       	pop	r28
 266:	1f 91       	pop	r17
 268:	0f 91       	pop	r16
 26a:	ff 90       	pop	r15
 26c:	ef 90       	pop	r14
 26e:	df 90       	pop	r13
 270:	cf 90       	pop	r12
 272:	bf 90       	pop	r11
 274:	af 90       	pop	r10
 276:	9f 90       	pop	r9
 278:	8f 90       	pop	r8
 27a:	08 95       	ret

0000027c <ds18b20read>:

//! Read temperature
uint8_t ds18b20read( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t *rom, int16_t *temperature )
{
 27c:	cf 92       	push	r12
 27e:	df 92       	push	r13
 280:	ef 92       	push	r14
 282:	ff 92       	push	r15
 284:	0f 93       	push	r16
 286:	1f 93       	push	r17
 288:	cf 93       	push	r28
 28a:	df 93       	push	r29
 28c:	cd b7       	in	r28, 0x3d	; 61
 28e:	de b7       	in	r29, 0x3e	; 62
 290:	29 97       	sbiw	r28, 0x09	; 9
 292:	0f b6       	in	r0, 0x3f	; 63
 294:	f8 94       	cli
 296:	de bf       	out	0x3e, r29	; 62
 298:	0f be       	out	0x3f, r0	; 63
 29a:	cd bf       	out	0x3d, r28	; 61
 29c:	67 01       	movw	r12, r14

	uint8_t sp[9];
	uint8_t ec = 0;

	//Communication, pull-up, CRC checks happen here
	ec = ds18b20rsp( port, direction, portin, mask, rom, sp );
 29e:	fe 01       	movw	r30, r28
 2a0:	31 96       	adiw	r30, 0x01	; 1
 2a2:	7f 01       	movw	r14, r30
 2a4:	94 df       	rcall	.-216    	; 0x1ce <ds18b20rsp>

	if ( ec != DS18B20_ERROR_OK )
 2a6:	88 23       	and	r24, r24
 2a8:	21 f0       	breq	.+8      	; 0x2b2 <ds18b20read+0x36>
	{
		*temperature = 0;
 2aa:	f6 01       	movw	r30, r12
 2ac:	11 82       	std	Z+1, r1	; 0x01
 2ae:	10 82       	st	Z, r1
		return ec;
 2b0:	0b c0       	rjmp	.+22     	; 0x2c8 <ds18b20read+0x4c>
	}

	//Get temperature from received data
	*temperature = (int16_t)( sp[1] << 8 ) + sp[0];
 2b2:	8a 81       	ldd	r24, Y+2	; 0x02
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	98 2f       	mov	r25, r24
 2b8:	88 27       	eor	r24, r24
 2ba:	29 81       	ldd	r18, Y+1	; 0x01
 2bc:	82 0f       	add	r24, r18
 2be:	91 1d       	adc	r25, r1
 2c0:	f6 01       	movw	r30, r12
 2c2:	91 83       	std	Z+1, r25	; 0x01
 2c4:	80 83       	st	Z, r24

	return DS18B20_ERROR_OK;
 2c6:	80 e0       	ldi	r24, 0x00	; 0
}
 2c8:	29 96       	adiw	r28, 0x09	; 9
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	f8 94       	cli
 2ce:	de bf       	out	0x3e, r29	; 62
 2d0:	0f be       	out	0x3f, r0	; 63
 2d2:	cd bf       	out	0x3d, r28	; 61
 2d4:	df 91       	pop	r29
 2d6:	cf 91       	pop	r28
 2d8:	1f 91       	pop	r17
 2da:	0f 91       	pop	r16
 2dc:	ff 90       	pop	r15
 2de:	ef 90       	pop	r14
 2e0:	df 90       	pop	r13
 2e2:	cf 90       	pop	r12
 2e4:	08 95       	ret

000002e6 <onewireInit>:
#include <inttypes.h>
#include <libraries/avr-ds80b20/onewire.h>

//! Initializes 1wire bus before transmission
uint8_t onewireInit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	dc 01       	movw	r26, r24
 2ec:	fb 01       	movw	r30, r22
	uint8_t response = 0;
	uint8_t sreg = SREG; //Store status register
 2ee:	3f b7       	in	r19, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
 2f0:	8c 91       	ld	r24, X
 2f2:	82 2b       	or	r24, r18
 2f4:	8c 93       	st	X, r24
	*direction |= mask; //Set port to output
 2f6:	80 81       	ld	r24, Z
 2f8:	82 2b       	or	r24, r18
 2fa:	80 83       	st	Z, r24
	*port &= ~mask; //Write 0 to output
 2fc:	9c 91       	ld	r25, X
 2fe:	82 2f       	mov	r24, r18
 300:	80 95       	com	r24
 302:	98 23       	and	r25, r24
 304:	9c 93       	st	X, r25
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 306:	98 ec       	ldi	r25, 0xC8	; 200
 308:	9a 95       	dec	r25
 30a:	f1 f7       	brne	.-4      	; 0x308 <onewireInit+0x22>

	_delay_us( 600 );

	*direction &= ~mask; //Set port to input
 30c:	90 81       	ld	r25, Z
 30e:	89 23       	and	r24, r25
 310:	80 83       	st	Z, r24
 312:	c7 e1       	ldi	r28, 0x17	; 23
 314:	ca 95       	dec	r28
 316:	f1 f7       	brne	.-4      	; 0x314 <onewireInit+0x2e>
 318:	00 00       	nop

	_delay_us( 70 );

	response = *portin & mask; //Read input
 31a:	ea 01       	movw	r28, r20
 31c:	98 81       	ld	r25, Y
 31e:	92 23       	and	r25, r18
 320:	d2 e4       	ldi	r29, 0x42	; 66
 322:	da 95       	dec	r29
 324:	f1 f7       	brne	.-4      	; 0x322 <onewireInit+0x3c>
 326:	00 c0       	rjmp	.+0      	; 0x328 <onewireInit+0x42>

	_delay_us( 200 );

	*port |= mask; //Write 1 to output
 328:	8c 91       	ld	r24, X
 32a:	82 2b       	or	r24, r18
 32c:	8c 93       	st	X, r24
	*direction |= mask; //Set port to output
 32e:	80 81       	ld	r24, Z
 330:	28 2b       	or	r18, r24
 332:	20 83       	st	Z, r18
 334:	88 ec       	ldi	r24, 0xC8	; 200
 336:	8a 95       	dec	r24
 338:	f1 f7       	brne	.-4      	; 0x336 <onewireInit+0x50>

	_delay_us( 600 );

	SREG = sreg; //Restore status register
 33a:	3f bf       	out	0x3f, r19	; 63

	return response != 0 ? ONEWIRE_ERROR_COMM : ONEWIRE_ERROR_OK;
 33c:	81 e0       	ldi	r24, 0x01	; 1
 33e:	91 11       	cpse	r25, r1
 340:	01 c0       	rjmp	.+2      	; 0x344 <onewireInit+0x5e>
 342:	80 e0       	ldi	r24, 0x00	; 0
}
 344:	df 91       	pop	r29
 346:	cf 91       	pop	r28
 348:	08 95       	ret

0000034a <onewireWriteBit>:

//! Sends a single bit over the 1wire bus
uint8_t onewireWriteBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t bit )
{
 34a:	0f 93       	push	r16
 34c:	fc 01       	movw	r30, r24
	uint8_t sreg = SREG;
 34e:	9f b7       	in	r25, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
 350:	80 81       	ld	r24, Z
 352:	82 2b       	or	r24, r18
 354:	80 83       	st	Z, r24
	*direction |= mask;
 356:	db 01       	movw	r26, r22
 358:	8c 91       	ld	r24, X
 35a:	82 2b       	or	r24, r18
 35c:	8c 93       	st	X, r24
	*port &= ~mask; //Write 0 to output
 35e:	80 81       	ld	r24, Z
 360:	32 2f       	mov	r19, r18
 362:	30 95       	com	r19
 364:	83 23       	and	r24, r19
 366:	80 83       	st	Z, r24

	if ( bit != 0 ) _delay_us( 8 );
 368:	00 23       	and	r16, r16
 36a:	29 f0       	breq	.+10     	; 0x376 <onewireWriteBit+0x2c>
 36c:	b2 e0       	ldi	r27, 0x02	; 2
 36e:	ba 95       	dec	r27
 370:	f1 f7       	brne	.-4      	; 0x36e <onewireWriteBit+0x24>
 372:	00 c0       	rjmp	.+0      	; 0x374 <onewireWriteBit+0x2a>
 374:	04 c0       	rjmp	.+8      	; 0x37e <onewireWriteBit+0x34>
 376:	8a e1       	ldi	r24, 0x1A	; 26
 378:	8a 95       	dec	r24
 37a:	f1 f7       	brne	.-4      	; 0x378 <onewireWriteBit+0x2e>
 37c:	00 c0       	rjmp	.+0      	; 0x37e <onewireWriteBit+0x34>
	else _delay_us( 80 );

	*port |= mask;
 37e:	80 81       	ld	r24, Z
 380:	28 2b       	or	r18, r24
 382:	20 83       	st	Z, r18

	if ( bit != 0 ) _delay_us( 80 );
 384:	00 23       	and	r16, r16
 386:	29 f0       	breq	.+10     	; 0x392 <onewireWriteBit+0x48>
 388:	aa e1       	ldi	r26, 0x1A	; 26
 38a:	aa 95       	dec	r26
 38c:	f1 f7       	brne	.-4      	; 0x38a <onewireWriteBit+0x40>
 38e:	00 c0       	rjmp	.+0      	; 0x390 <onewireWriteBit+0x46>
 390:	01 c0       	rjmp	.+2      	; 0x394 <onewireWriteBit+0x4a>
 392:	00 c0       	rjmp	.+0      	; 0x394 <onewireWriteBit+0x4a>
	else _delay_us( 2 );

	SREG = sreg;
 394:	9f bf       	out	0x3f, r25	; 63

	return bit != 0;
 396:	81 e0       	ldi	r24, 0x01	; 1
 398:	01 11       	cpse	r16, r1
 39a:	01 c0       	rjmp	.+2      	; 0x39e <onewireWriteBit+0x54>
 39c:	80 e0       	ldi	r24, 0x00	; 0
}
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <onewireWrite>:

//! Transmits a byte over 1wire bus
void onewireWrite( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask, uint8_t data )
{
 3a2:	9f 92       	push	r9
 3a4:	af 92       	push	r10
 3a6:	bf 92       	push	r11
 3a8:	cf 92       	push	r12
 3aa:	df 92       	push	r13
 3ac:	ef 92       	push	r14
 3ae:	ff 92       	push	r15
 3b0:	0f 93       	push	r16
 3b2:	1f 93       	push	r17
 3b4:	cf 93       	push	r28
 3b6:	df 93       	push	r29
 3b8:	5c 01       	movw	r10, r24
 3ba:	6b 01       	movw	r12, r22
 3bc:	7a 01       	movw	r14, r20
 3be:	12 2f       	mov	r17, r18
 3c0:	d0 2f       	mov	r29, r16
	uint8_t sreg = SREG; //Store status register
 3c2:	9f b6       	in	r9, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
 3c4:	c1 e0       	ldi	r28, 0x01	; 1
 3c6:	08 c0       	rjmp	.+16     	; 0x3d8 <onewireWrite+0x36>
		onewireWriteBit( port, direction, portin, mask, data & i );
 3c8:	0c 2f       	mov	r16, r28
 3ca:	0d 23       	and	r16, r29
 3cc:	21 2f       	mov	r18, r17
 3ce:	a7 01       	movw	r20, r14
 3d0:	b6 01       	movw	r22, r12
 3d2:	c5 01       	movw	r24, r10
 3d4:	ba df       	rcall	.-140    	; 0x34a <onewireWriteBit>

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Write byte in 8 single bit writes
 3d6:	cc 0f       	add	r28, r28
 3d8:	c1 11       	cpse	r28, r1
 3da:	f6 cf       	rjmp	.-20     	; 0x3c8 <onewireWrite+0x26>
		onewireWriteBit( port, direction, portin, mask, data & i );

	SREG = sreg;
 3dc:	9f be       	out	0x3f, r9	; 63
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	1f 91       	pop	r17
 3e4:	0f 91       	pop	r16
 3e6:	ff 90       	pop	r15
 3e8:	ef 90       	pop	r14
 3ea:	df 90       	pop	r13
 3ec:	cf 90       	pop	r12
 3ee:	bf 90       	pop	r11
 3f0:	af 90       	pop	r10
 3f2:	9f 90       	pop	r9
 3f4:	08 95       	ret

000003f6 <onewireReadBit>:

//! Reads a bit from the 1wire bus
uint8_t onewireReadBit( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 3f6:	dc 01       	movw	r26, r24
 3f8:	fb 01       	movw	r30, r22
	uint8_t bit = 0;
	uint8_t sreg = SREG;
 3fa:	3f b7       	in	r19, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	*port |= mask; //Write 1 to output
 3fc:	8c 91       	ld	r24, X
 3fe:	82 2b       	or	r24, r18
 400:	8c 93       	st	X, r24
	*direction |= mask;
 402:	80 81       	ld	r24, Z
 404:	82 2b       	or	r24, r18
 406:	80 83       	st	Z, r24
	*port &= ~mask; //Write 0 to output
 408:	8c 91       	ld	r24, X
 40a:	92 2f       	mov	r25, r18
 40c:	90 95       	com	r25
 40e:	89 23       	and	r24, r25
 410:	8c 93       	st	X, r24
 412:	00 c0       	rjmp	.+0      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
	_delay_us( 2 );
	*direction &= ~mask; //Set port to input
 414:	80 81       	ld	r24, Z
 416:	98 23       	and	r25, r24
 418:	90 83       	st	Z, r25
 41a:	00 c0       	rjmp	.+0      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41c:	00 c0       	rjmp	.+0      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 41e:	00 00       	nop
	_delay_us( 5 );
	bit = ( ( *portin & mask ) != 0 ); //Read input
 420:	fa 01       	movw	r30, r20
 422:	80 81       	ld	r24, Z
 424:	28 23       	and	r18, r24
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	09 f4       	brne	.+2      	; 0x42c <__LOCK_REGION_LENGTH__+0x2c>
 42a:	80 e0       	ldi	r24, 0x00	; 0
 42c:	f4 e1       	ldi	r31, 0x14	; 20
 42e:	fa 95       	dec	r31
 430:	f1 f7       	brne	.-4      	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
	_delay_us( 60 );
	SREG = sreg;
 432:	3f bf       	out	0x3f, r19	; 63

	return bit;
}
 434:	08 95       	ret

00000436 <onewireRead>:

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
 436:	af 92       	push	r10
 438:	bf 92       	push	r11
 43a:	cf 92       	push	r12
 43c:	df 92       	push	r13
 43e:	ef 92       	push	r14
 440:	ff 92       	push	r15
 442:	0f 93       	push	r16
 444:	1f 93       	push	r17
 446:	cf 93       	push	r28
 448:	df 93       	push	r29
 44a:	5c 01       	movw	r10, r24
 44c:	6b 01       	movw	r12, r22
 44e:	7a 01       	movw	r14, r20
 450:	12 2f       	mov	r17, r18
	uint8_t sreg = SREG; //Store status register
 452:	0f b7       	in	r16, 0x3f	; 63

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
 454:	c1 e0       	ldi	r28, 0x01	; 1

//! Reads a byte from the 1wire bus
uint8_t onewireRead( volatile uint8_t *port, volatile uint8_t *direction, volatile uint8_t *portin, uint8_t mask )
{
	uint8_t sreg = SREG; //Store status register
	uint8_t data = 0;
 456:	d0 e0       	ldi	r29, 0x00	; 0

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
 458:	0a c0       	rjmp	.+20     	; 0x46e <onewireRead+0x38>
		data |= onewireReadBit( port, direction, portin, mask ) * i;
 45a:	21 2f       	mov	r18, r17
 45c:	a7 01       	movw	r20, r14
 45e:	b6 01       	movw	r22, r12
 460:	c5 01       	movw	r24, r10
 462:	c9 df       	rcall	.-110    	; 0x3f6 <onewireReadBit>
 464:	8c 9f       	mul	r24, r28
 466:	c0 01       	movw	r24, r0
 468:	11 24       	eor	r1, r1
 46a:	d8 2b       	or	r29, r24

	#ifdef ONEWIRE_AUTO_CLI
		cli( );
	#endif

	for ( i = 1; i != 0; i <<= 1 ) //Read byte in 8 single bit reads
 46c:	cc 0f       	add	r28, r28
 46e:	c1 11       	cpse	r28, r1
 470:	f4 cf       	rjmp	.-24     	; 0x45a <onewireRead+0x24>
		data |= onewireReadBit( port, direction, portin, mask ) * i;

	SREG = sreg;
 472:	0f bf       	out	0x3f, r16	; 63

	return data;
}
 474:	8d 2f       	mov	r24, r29
 476:	df 91       	pop	r29
 478:	cf 91       	pop	r28
 47a:	1f 91       	pop	r17
 47c:	0f 91       	pop	r16
 47e:	ff 90       	pop	r15
 480:	ef 90       	pop	r14
 482:	df 90       	pop	r13
 484:	cf 90       	pop	r12
 486:	bf 90       	pop	r11
 488:	af 90       	pop	r10
 48a:	08 95       	ret

0000048c <board_init>:
#include <asf.h>
#include <board.h>
#include <conf_board.h>

void board_init(void)
{
 48c:	08 95       	ret

0000048e <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
 48e:	04 c0       	rjmp	.+8      	; 0x498 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
 490:	61 50       	subi	r22, 0x01	; 1
 492:	71 09       	sbc	r23, r1
 494:	81 09       	sbc	r24, r1
 496:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
 498:	61 15       	cp	r22, r1
 49a:	71 05       	cpc	r23, r1
 49c:	81 05       	cpc	r24, r1
 49e:	91 05       	cpc	r25, r1
 4a0:	b9 f7       	brne	.-18     	; 0x490 <__portable_avr_delay_cycles+0x2>
 4a2:	08 95       	ret

000004a4 <main>:
#include "libraries/avr-ds80b20/ds18b20.h"
#include "libraries/avr-ds80b20/ds18b20.h"
#include "delay.h"

int main (void)
{
 4a4:	cf 93       	push	r28
 4a6:	df 93       	push	r29
 4a8:	00 d0       	rcall	.+0      	; 0x4aa <main+0x6>
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
	sysclk_init();
 4ae:	f8 dd       	rcall	.-1040   	; 0xa0 <sysclk_init>
	board_init();
 4b0:	ed df       	rcall	.-38     	; 0x48c <board_init>
	
	driver_uart_init();
 4b2:	1a de       	rcall	.-972    	; 0xe8 <driver_uart_init>
 4b4:	00 e0       	ldi	r16, 0x00	; 0
	
	int temp;

	while(true){
		//Start conversion (without ROM matching)
		ds18b20convert( &PORTB, &DDRB, &PINB, ( 1 << 0 ), NULL );
 4b6:	10 e0       	ldi	r17, 0x00	; 0
 4b8:	21 e0       	ldi	r18, 0x01	; 1
 4ba:	43 e2       	ldi	r20, 0x23	; 35
 4bc:	50 e0       	ldi	r21, 0x00	; 0
 4be:	64 e2       	ldi	r22, 0x24	; 36
 4c0:	70 e0       	ldi	r23, 0x00	; 0
 4c2:	85 e2       	ldi	r24, 0x25	; 37
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	5d de       	rcall	.-838    	; 0x182 <ds18b20convert>
 4c8:	6b e0       	ldi	r22, 0x0B	; 11

		//Delay (sensor needs time to perform conversion)
		//_delay_ms( 1000 );
		delay_ms(1000);
 4ca:	7b e8       	ldi	r23, 0x8B	; 139
 4cc:	82 e0       	ldi	r24, 0x02	; 2
 4ce:	90 e0       	ldi	r25, 0x00	; 0
 4d0:	de df       	rcall	.-68     	; 0x48e <__portable_avr_delay_cycles>
 4d2:	ce 01       	movw	r24, r28

		//Read temperature (without ROM matching)
		ds18b20read( &PORTB, &DDRB, &PINB, ( 1 << 0 ), NULL, &temp );
 4d4:	01 96       	adiw	r24, 0x01	; 1
 4d6:	7c 01       	movw	r14, r24
 4d8:	21 e0       	ldi	r18, 0x01	; 1
 4da:	43 e2       	ldi	r20, 0x23	; 35
 4dc:	50 e0       	ldi	r21, 0x00	; 0
 4de:	64 e2       	ldi	r22, 0x24	; 36
 4e0:	70 e0       	ldi	r23, 0x00	; 0
 4e2:	85 e2       	ldi	r24, 0x25	; 37
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	ca de       	rcall	.-620    	; 0x27c <ds18b20read>
 4e8:	e5 cf       	rjmp	.-54     	; 0x4b4 <main+0x10>

000004ea <_exit>:
 4ea:	f8 94       	cli

000004ec <__stop_program>:
 4ec:	ff cf       	rjmp	.-2      	; 0x4ec <__stop_program>
