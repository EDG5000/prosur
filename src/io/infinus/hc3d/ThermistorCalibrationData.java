package io.infinus.hc3d;

import io.infinus.hc3d.Temperatures.Sample;

public class ThermistorCalibrationData {
	// Will contain calculated temperatures at the end of each row for verification in some cases
	// The values should match refTemp0
	// Layout: refTemp0, refTemp1, voltage0...[, temp0...]
	// Will be null in all cases after static iniailization
	// Only calibrationData will be populated, if rawCalibrationData was populated in code
	private static float[][] rawCalibrationData = {
			{2351911f,25.25f,25.06f,511.0f,500.0f,508.0f,506.0f,503.0f,504.0f,502.0f,503.0f,497.0f,503.0f,524.0f,493.0f},
			{2405947f,26.25f,26.69f,522.0f,412.0f,514.0f,506.0f,500.0f,464.0f,475.0f,452.0f,424.0f,480.0f,528.0f,514.0f},
			{2424961f,27.31f,28.12f,513.0f,348.0f,494.0f,516.0f,482.0f,411.0f,461.0f,432.0f,366.0f,468.0f,510.0f,535.0f},
			{2437970f,28.31f,29.19f,536.0f,351.0f,505.0f,522.0f,483.0f,426.0f,498.0f,442.0f,371.0f,483.0f,509.0f,553.0f},
			{2448973f,29.37f,30.19f,556.0f,364.0f,520.0f,533.0f,496.0f,458.0f,532.0f,455.0f,381.0f,486.0f,517.0f,564.0f},
			{2461980f,30.56f,32.0f,569.0f,423.0f,560.0f,545.0f,539.0f,499.0f,561.0f,485.0f,419.0f,527.0f,548.0f,572.0f},
			{2471984f,31.56f,32.31f,582.0f,412.0f,564.0f,564.0f,547.0f,514.0f,572.0f,496.0f,418.0f,548.0f,555.0f,595.0f},
			{2477985f,32.56f,33.0f,593.0f,418.0f,570.0f,563.0f,551.0f,519.0f,584.0f,516.0f,438.0f,557.0f,574.0f,589.0f},
			{2488989f,33.56f,34.0f,622.0f,479.0f,605.0f,586.0f,581.0f,571.0f,608.0f,566.0f,485.0f,569.0f,603.0f,604.0f},
			{2497994f,34.69f,35.19f,640.0f,508.0f,615.0f,603.0f,613.0f,593.0f,642.0f,579.0f,503.0f,596.0f,625.0f,614.0f},
			{2504998f,35.75f,36.38f,640.0f,506.0f,625.0f,619.0f,617.0f,604.0f,645.0f,589.0f,498.0f,597.0f,627.0f,618.0f},
			{1741268f,37.44f,37.25f,277.0f,411.0f,492.0f,635.0f,501.0f,487.0f,493.0f,491.0f,398.0f,588.0f,625.0f,634.0f},
			{1634207f,38.44f,38.25f,463.0f,428.0f,497.0f,641.0f,508.0f,504.0f,510.0f,502.0f,402.0f,576.0f,598.0f,646.0f},
			{1532160f,39.44f,39.31f,491.0f,457.0f,517.0f,656.0f,525.0f,526.0f,528.0f,527.0f,422.0f,601.0f,596.0f,655.0f},
			{1437104f,40.44f,40.25f,504.0f,464.0f,533.0f,670.0f,541.0f,530.0f,536.0f,534.0f,444.0f,622.0f,582.0f,665.0f},
			{1346010f,41.44f,41.25f,522.0f,480.0f,550.0f,681.0f,555.0f,537.0f,547.0f,550.0f,461.0f,647.0f,592.0f,674.0f},
			{1261930f,42.44f,42.25f,527.0f,479.0f,554.0f,690.0f,559.0f,541.0f,549.0f,553.0f,460.0f,661.0f,595.0f,685.0f},
			{1181828f,43.44f,43.25f,554.0f,504.0f,577.0f,699.0f,579.0f,565.0f,574.0f,581.0f,492.0f,674.0f,617.0f,694.0f},
			{1100773f,44.44f,44.25f,551.0f,498.0f,573.0f,706.0f,577.0f,559.0f,566.0f,575.0f,476.0f,669.0f,609.0f,704.0f},
			{1023735f,45.44f,45.31f,562.0f,510.0f,577.0f,713.0f,582.0f,576.0f,581.0f,583.0f,482.0f,671.0f,618.0f,712.0f},
			{955702f,46.44f,46.31f,604.0f,562.0f,623.0f,725.0f,623.0f,613.0f,615.0f,619.0f,536.0f,689.0f,650.0f,720.0f},
			{893683f,47.44f,47.25f,637.0f,601.0f,661.0f,738.0f,655.0f,643.0f,619.0f,627.0f,534.0f,693.0f,653.0f,730.0f},
			{826652f,48.44f,48.31f,603.0f,552.0f,621.0f,740.0f,622.0f,608.0f,615.0f,624.0f,526.0f,692.0f,648.0f,737.0f},
			{766618f,49.44f,49.25f,614.0f,558.0f,636.0f,750.0f,636.0f,610.0f,623.0f,633.0f,541.0f,701.0f,662.0f,746.0f},
			{707589f,50.44f,50.25f,612.0f,551.0f,637.0f,759.0f,638.0f,603.0f,622.0f,640.0f,532.0f,704.0f,662.0f,754.0f},
			{645557f,51.44f,51.31f,590.0f,515.0f,609.0f,768.0f,619.0f,579.0f,604.0f,632.0f,491.0f,692.0f,641.0f,764.0f},
			{590510f,52.44f,52.25f,589.0f,512.0f,608.0f,776.0f,625.0f,577.0f,601.0f,634.0f,488.0f,691.0f,640.0f,772.0f},
			{533276f,53.44f,53.31f,602.0f,521.0f,620.0f,786.0f,636.0f,585.0f,608.0f,644.0f,495.0f,698.0f,649.0f,778.0f},
			{2615052f,54.44f,55.38f,736.0f,482.0f,696.0f,703.0f,776.0f,719.0f,741.0f,651.0f,442.0f,723.0f,601.0f,783.0f},
			{429214f,55.44f,55.31f,631.0f,548.0f,649.0f,800.0f,662.0f,612.0f,629.0f,668.0f,529.0f,716.0f,674.0f,792.0f},
			{383188f,56.44f,56.25f,641.0f,560.0f,653.0f,808.0f,666.0f,625.0f,635.0f,672.0f,526.0f,715.0f,675.0f,797.0f},
			{2630059f,57.44f,57.88f,743.0f,499.0f,716.0f,742.0f,779.0f,737.0f,721.0f,663.0f,472.0f,742.0f,626.0f,800.0f},
			{2636064f,58.44f,59.19f,746.0f,496.0f,711.0f,743.0f,788.0f,741.0f,691.0f,652.0f,448.0f,746.0f,605.0f,807.0f},
			{242096f,59.44f,59.75f,666.0f,582.0f,692.0f,829.0f,694.0f,660.0f,669.0f,705.0f,546.0f,728.0f,682.0f,820.0f},
			{2646069f,60.81f,61.81f,744.0f,505.0f,724.0f,754.0f,810.0f,772.0f,707.0f,676.0f,461.0f,768.0f,625.0f,833.0f},
			{2651072f,62.25f,62.75f,737.0f,505.0f,721.0f,762.0f,810.0f,780.0f,718.0f,685.0f,472.0f,766.0f,624.0f,829.0f},
			{2658073f,63.31f,64.5f,745.0f,529.0f,739.0f,770.0f,815.0f,781.0f,728.0f,682.0f,478.0f,778.0f,635.0f,830.0f},
			{215078f,64.44f,64.25f,662.0f,562.0f,671.0f,851.0f,698.0f,635.0f,665.0f,708.0f,536.0f,770.0f,689.0f,844.0f},
			{184056f,65.44f,65.19f,650.0f,535.0f,651.0f,855.0f,686.0f,621.0f,650.0f,698.0f,492.0f,753.0f,666.0f,849.0f},
			{2676082f,66.44f,67.44f,756.0f,566.0f,753.0f,778.0f,863.0f,803.0f,743.0f,682.0f,500.0f,766.0f,671.0f,851.0f},
			{129024f,67.44f,67.06f,656.0f,527.0f,658.0f,863.0f,690.0f,612.0f,653.0f,697.0f,494.0f,763.0f,664.0f,854.0f},
			{2685084f,68.44f,69.25f,745.0f,584.0f,759.0f,806.0f,868.0f,794.0f,804.0f,754.0f,628.0f,797.0f,748.0f,868.0f},
			{73979f,69.44f,69.25f,657.0f,536.0f,654.0f,868.0f,689.0f,631.0f,672.0f,704.0f,479.0f,756.0f,655.0f,858.0f},
			{2694091f,70.5f,71.12f,772.0f,622.0f,771.0f,828.0f,850.0f,793.0f,759.0f,697.0f,530.0f,754.0f,689.0f,863.0f},
			{2698093f,71.5f,72.25f,772.0f,623.0f,771.0f,834.0f,846.0f,778.0f,776.0f,713.0f,563.0f,762.0f,702.0f,867.0f},
			{2706095f,72.75f,73.0f,693.0f,671.0f,719.0f,629.0f,702.0f,695.0f,557.0f,556.0f,535.0f,558.0f,549.0f,562.0f},
			{2713098f,73.81f,75.0f,744.0f,504.0f,661.0f,792.0f,820.0f,672.0f,756.0f,631.0f,391.0f,714.0f,599.0f,897.0f},
			{2718099f,74.81f,75.81f,737.0f,504.0f,671.0f,810.0f,809.0f,671.0f,767.0f,648.0f,382.0f,692.0f,589.0f,900.0f},
			{2724105f,75.87f,76.19f,769.0f,593.0f,747.0f,840.0f,843.0f,724.0f,791.0f,683.0f,498.0f,737.0f,668.0f,907.0f},
			{2728104f,76.87f,77.37f,757.0f,581.0f,731.0f,831.0f,836.0f,721.0f,792.0f,703.0f,543.0f,753.0f,694.0f,910.0f},
			{2733106f,77.87f,78.31f,764.0f,578.0f,723.0f,821.0f,833.0f,706.0f,784.0f,671.0f,482.0f,748.0f,658.0f,909.0f},
			{2739112f,79.19f,79.87f,779.0f,603.0f,734.0f,815.0f,831.0f,718.0f,800.0f,693.0f,507.0f,750.0f,667.0f,914.0f},
			{2746112f,80.31f,80.31f,766.0f,588.0f,731.0f,826.0f,819.0f,713.0f,752.0f,697.0f,517.0f,753.0f,682.0f,918.0f},
			{2755118f,81.37f,81.81f,771.0f,593.0f,736.0f,818.0f,821.0f,696.0f,689.0f,717.0f,516.0f,741.0f,673.0f,917.0f},
			{2762119f,82.37f,82.56f,778.0f,604.0f,756.0f,820.0f,835.0f,710.0f,704.0f,717.0f,521.0f,744.0f,685.0f,922.0f},
			{3224702f,83.44f,83.87f,746.0f,572.0f,725.0f,925.0f,800.0f,661.0f,736.0f,829.0f,515.0f,802.0f,709.0f,917.0f},
			{2779128f,84.5f,84.62f,792.0f,590.0f,737.0f,815.0f,842.0f,711.0f,700.0f,742.0f,518.0f,757.0f,686.0f,924.0f},
			{2795133f,85.62f,85.94f,813.0f,656.0f,783.0f,848.0f,868.0f,751.0f,761.0f,792.0f,604.0f,796.0f,747.0f,935.0f},
			{2806171f,86.62f,86.94f,800.0f,624.0f,771.0f,840.0f,866.0f,716.0f,745.0f,785.0f,575.0f,795.0f,731.0f,937.0f},
			{2815218f,87.62f,87.5f,820.0f,661.0f,799.0f,858.0f,883.0f,756.0f,772.0f,811.0f,634.0f,824.0f,763.0f,937.0f},
			{2831217f,88.69f,88.5f,803.0f,627.0f,766.0f,850.0f,868.0f,737.0f,759.0f,798.0f,550.0f,797.0f,709.0f,933.0f},
			{2845229f,89.75f,89.75f,819.0f,646.0f,788.0f,867.0f,882.0f,746.0f,797.0f,821.0f,609.0f,820.0f,746.0f,936.0f},
			{2874238f,90.75f,90.5f,814.0f,630.0f,782.0f,868.0f,880.0f,732.0f,784.0f,841.0f,627.0f,833.0f,768.0f,940.0f},
	};
	
	// Accessed by Temperatures at runtime
	public static Sample[] calibrationData;

	static {
		if(rawCalibrationData != null) {
			calibrationData = new Sample[rawCalibrationData.length];
			// Place raw data into data structure to facilitate access of the data
			for(int i = 0; i < rawCalibrationData.length; i++) {
				calibrationData[i] = new Sample(rawCalibrationData[i]);
			}
		}
	}
	
}
